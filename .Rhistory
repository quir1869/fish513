for (i in 1920:2024) {
value <- occ_count(scientificName = "ostracoda", year = i)
shrimp_gbif$count[which(i == 1920:2024)] <- value
}
shrimp_gbif %>%
ggplot(aes(x = date, y = count)) +
geom_line() +
labs(x = " ", y = "ostracoda count") +
theme_light() +
geom_smooth(method = "")
gbif_abundance <- function(scientific_name = "", output_file = "output_file") {
# Create an empty data frame to store date and count
result <- data.frame(date = make_date(1920:2024, 1, 1), count = NA)
# Loop over each year from 1920 to 2024
for (i in 1920:2024) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = scientific_name, year = i)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 1920:2024)] <- value
}
# Use assign() to create a variable with the name of output_file (string)
assign(output_file, result, envir = .GlobalEnv)
# Return the result data frame, so it can be used if needed
return(result)
}
gbif_abundance <- function(scientific_name = "") {
# Create an empty data frame to store date and count
result <- data.frame(date = make_date(1920:2024, 1, 1), count = NA)
# Loop over each year from 1920 to 2024
for (i in 1920:2024) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = scientific_name, year = i)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 1920:2024)] <- value
}
return(result)
}
shrimp_gbif <- gbif_abundance(scientific_name = "Decapoda")
gbif_time_series <- function(data = data) {
data %>%
ggplot(aes(x = date, y = count)) +
geom_line() +
labs(x = " ", y = "Decapoda count") +
theme_light() +
geom_smooth(method = "")
}
gbif_time_series(shrimp_gbif)
# FUNCTION DEFINITION: Create time series of previously obtained gbif data
gbif_time_series <- function(data = data, taxa_name = "") {
data %>%
ggplot(aes(x = date, y = count)) +
geom_line() +
labs(x = " ", y = paste0(taxa_name, " count")) +
theme_light() +
geom_smooth(method = "")
}
ostracoda_gbif <- gbif_abundance(scientific_name = "Ostracoda")
gbif_time_series(shrimp_gbif, taxa_name = "Decapoda")
gbif_time_series(ostracoda_gbif, taxa_name = "Ostracoda")
?occ_count()
occ_count(scientificName = scientific_name, year = i)
occ_count(scientificName = "Decapoda", year = i)
occ_count(scientificName = "Decapoda", year = i, country = "US")
occ_count_country(scientificName = "Decapoda") # Inspect the results
occ_count_country("MX") # Inspect the results
occ_count(scientificName = "Decapoda", year = i, country = "NLD")
occ_count(scientificName = "Decapoda", year = i, country = "NLD")
occ_count_country() # Inspect the results
occ_count_country("Decapoda") # Inspect the results
occ_count_country() # Inspect the results
occ_count(scientificName = "Decapoda", year = i, country = "NL")
occ_count_country() # Inspect the results
occ_count_country() %>%
pull(iso2)# Inspect the results
countries <- occ_count_country() %>%
pull(iso2)
# FUNCTION DEFINITION: Obtain gbif abundance data
gbif_abundance <- function(scientific_name = "") {
# Create an empty data frame to store date and count
result <- data.frame(date = make_date(1920:2024, 1, 1), count = NA)
# Loop over each year from 1920 to 2024
for (i in 1920:2024) {
for (country in countries) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = scientific_name, year = i, country = country)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 1920:2024)] <- value
}
}
return(result)
}
# Obtain gbif data on target taxa
shrimp_gbif <- gbif_abundance(scientific_name = "Decapoda")
shrimp_gbif
# for parallel processing
install.packages("parallel")
# for parallel processing
library(parallel)
# FUNCTION DEFINITION: Obtain gbif abundance data
gbif_abundance <- function(scientific_name = "", countries) {
# Create an empty data frame to store date and count
result <- data.frame(date = make_date(1920:2024, 1, 1), count = NA)
# Number of cores to use for parallel processing
num_cores <- detectCores() - 1  # Use all cores minus 1 for system processes
# Create a list to store tasks for parallel processing
tasks <- list()
# Loop over each year and country combination and assign to parallel tasks
for (i in 1920:2024) {
for (country in countries) {
tasks <- append(tasks, list(list(year = i, country = country)))
}
}
# Function to fetch and process the counts in parallel
fetch_counts <- function(task) {
year <- task$year
country <- task$country
value <- occ_count(scientificName = scientific_name, year = year, country = country)
return(list(year = year, country = country, count = value))
}
# Run the tasks in parallel
counts <- mclapply(tasks, fetch_counts, mc.cores = num_cores)
# Process the results and assign to the result data frame
for (count_info in counts) {
year_idx <- which(result$date == count_info$year)
result$count[year_idx] <- count_info$count
}
return(result)
}
data.frame(date = make_date(1920:2024, 1, 1), country = conutries, count = NA)
countries
data.frame(date = make_date(1920:2024, 1, 1), country = data.frame(date = make_date(1920:2024, 1, 1), count = NA), count = NA)
data.frame(date = make_date(1920:2024, 1, 1), country = countries, count = NA)
data.frame(date = make_date(1920:2024, 1, 1), country = countries, count = NA)
data.frame(
date = rep(make_date(1920:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(1920:2024)),
count = NA
)
# Create an empty data frame to store date and count
result <- data.frame(
date = rep(make_date(1920:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(1920:2024)),
count = NA
)
# FUNCTION DEFINITION: Obtain gbif abundance data
gbif_abundance <- function(scientific_name = "", countries) {
# Create an empty data frame to store date and count
result <- data.frame(
date = rep(make_date(1920:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(1920:2024)),
count = NA
)
# Number of cores to use for parallel processing
num_cores <- detectCores() - 1  # Use all cores minus 1 for system processes
# Create a list to store tasks for parallel processing
tasks <- expand.grid(year = 1920:2024, country = countries)  # Expand grid of years and countries
# Function to fetch and process the counts in parallel
fetch_counts <- function(task) {
year <- task$year
country <- task$country
value <- occ_count(scientificName = scientific_name, year = year, country = country)
return(data.frame(year = year, country = country, count = value))
}
# Run the tasks in parallel
counts <- mclapply(1:nrow(tasks), function(i) fetch_counts(tasks[i, , drop = FALSE]), mc.cores = num_cores)
# Combine the results into one data frame
counts_df <- do.call(rbind, counts)
# Merge the result with the counts from parallel processing
result <- merge(result, counts_df, by = c("date", "country"), all.x = TRUE)
return(result)
}
# Obtain gbif data on target taxa
shrimp_gbif <- gbif_abundance(scientific_name = "Decapoda")
# Obtain country information
countries <- occ_count_country() %>%
pull(iso2)
# Obtain gbif data on target taxa
shrimp_gbif <- gbif_abundance(scientific_name = "Decapoda")
# Obtain gbif data on target taxa
shrimp_gbif <- gbif_abundance(scientific_name = "Decapoda", countries = countries)
# Create an empty data frame to store date and count
result <- data.frame(
date = rep(make_date(1920:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(1920:2024)),
count = NA
)
result
result %>% distinct(date)
result %>% distinct(country)
result %>% distinct(date)
result
$count[which(i == 1920:2024)]
i
which(i == 1920:2024)
[which(i == 1920:2024)]
result$count[which(i == 1920:2024)]
# Ocean polygon
ocean <- st_polygon(list(cbind(c(seq(-180, 179, len = 100), rep(180, 100),
seq(179, -180, len = 100), rep(-180, 100)),
c(rep(-90, 100), seq(-89, 89, len = 100),
rep(90, 100), seq(89, -90, len = 100))))) |>
st_sfc(crs = "WGS84") |>
st_as_sf()
# Make map creation simpler
create_map <- function(data, fill = "num_species") {
world_map <- ne_countries(scale = "medium", returnclass = "sf")
world_map <- world_map %>%
left_join(data, by = c("iso_a3" = "country"))
world_map %>%
ggplot() +
geom_sf(data = ocean, fill = "#8080ff80") +
geom_sf(aes(fill = !!sym(fill)), color = "black") +
scale_fill_viridis_c(option = "plasma") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_sf(crs = "+proj=robin")
}
# FUNCTION DEFINITION: Obtain gbif abundance data
gbif_abundance <- function(scientific_name = "") {
# Create an empty data frame to store date and count
result <- data.frame(
date = rep(make_date(1920:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(1920:2024)),
count = NA
)
# Loop over each year from 1920 to 2024
for (i in 1920:2024) {
for (country in countries) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = scientific_name, year = i, country = country)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 1920:2024)] <- value
}
}
return(result)
}
# FUNCTION DEFINITION: Create time series of previously obtained gbif data
gbif_time_series <- function(data = data, taxa_name = "") {
data %>%
ggplot(aes(x = date, y = count)) +
geom_line() +
labs(x = " ", y = paste0(taxa_name, " count")) +
theme_light() +
geom_smooth(method = "")
}
result
1920:2024
iterator = iterator + 105
iterator = 0
iterator = iterator + 105
which(i == 1920:2024
which(i == 1920:2024) + iterator
i
which(i == 1920:2024)
which(i == 1920:2024) + iterator
result
countries
# FUNCTION DEFINITION: Obtain gbif abundance data
gbif_abundance <- function(scientific_name = "") {
# Create an empty data frame to store date and count
result <- data.frame(
date = rep(make_date(1920:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(1920:2024)),
count = NA
)
# Loop over each year from 1920 to 2024
for (i in 1920:2024) {
iterator = 0
for (country in countries) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = scientific_name, year = i, country = country)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 1920:2024) + iterator] <- value
}
iterator = iterator + 105
}
return(result)
}
# Obtain gbif data on target taxa
shrimp_gbif <- gbif_abundance(scientific_name = "Decapoda", countries = countries)
# Obtain gbif data on target taxa
shrimp_gbif <- gbif_abundance(scientific_name = "Decapoda")
shrimp_gbif
occ_count(scientificName = "Decapoda", year = i, country = "US")
occ_count(scientificName = "Decapoda", year = 2024, country = "US")
occ_count(scientificName = "Decapoda", year = 2023, country = "US")
data.frame(
date = rep(make_date(2024:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(2024:2024)),
count = NA
data.frame(
# Create an empty data frame to store date and count
result <- data.frame(
date = rep(make_date(2024:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(2024:2024)),
count = NA
)
data.frame(
date = rep(make_date(2024:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(2024:2024)),
count = NA
)
# FUNCTION DEFINITION: Obtain gbif abundance data
gbif_abundance <- function(scientific_name = "") {
# Create an empty data frame to store date and count
result <- data.frame(
date = rep(make_date(2024:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(2024:2024)),
count = NA
)
# Loop over each year from 2024 to 2024
for (i in 2024:2024) {
for (j in countries) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = scientific_name, year = i, country = j)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 2024:2024) + iterator] <- value
}
iterator = iterator + 105
}
return(result)
}
# Obtain gbif data on target taxa
shrimp_gbif <- gbif_abundance(scientific_name = "Decapoda")
shrimp_gbif
shrimp_gbif
countries
for (j in countries) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = scientific_name, year = i, country = j)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 2024:2024) + iterator] <- value
print(value)
}
for (i in 2024:2024) {
for (j in countries) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = scientific_name, year = i, country = j)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 2024:2024) + iterator] <- value
print(value)
}
iterator = iterator + 105
}
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = "Decapoda", year = i, country = j)
for (i in 2024:2024) {
for (j in countries) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = "Decapoda", year = i, country = j)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 2024:2024) + iterator] <- value
print(value)
}
iterator = iterator + 105
}
result
iterator
which(i == 2024:2024) + iterator
for (j in countries) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = "Decapoda", year = i, country = j)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 2024:2024) + iterator] <- value
print(value)
}
result
iterator = 0
for (i in 2024:2024) {
for (j in countries) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = "Decapoda", year = i, country = j)
# Assign the count value to the respective row in the result data frame
result$count[which(i == 2024:2024) + iterator] <- value
print(value)
}
iterator = iterator + 105
}
result
which(j == countries)
result$date == 2024
result$date == make_date(2024,1,1))
make_date(2024,1,1)
result$date == make_date(2024,1,1)
result$date == make_date(2024,1,1))
which(result$date == make_date(2024,1,1))
which(result$date == make_date(i,1,1) & result$country == j)
country
j
countries
result$date
iterator = 0
for (i in 2024:2024) {
for (j in countries) {
# Fetch count of occurrences for the given scientific name and year
value <- occ_count(scientificName = "Decapoda", year = i, country = j)
# Assign the count value to the respective row in the result data frame
result$count[which(result$date == make_date(i,1,1) & result$country == j)] <- value
print(value)
}
iterator = iterator + 105
}
result
# Create an empty data frame to store date and count
result <- data.frame(
date = rep(make_date(2024:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(2024:2024)),
count = NA
)
# Create an empty data frame to store date and count
result <- data.frame(
date = rep(make_date(2024:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(2024:2024)),
count = NA
)
result
result <- data.frame(
date = rep(make_date(2024:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(2024:2024)),
count = NA
)
result
gbif_abundance <- function(scientific_name = "") {
# Create an empty data frame to store date and count
result <- data.frame(
date = rep(make_date(1920:2024, 1, 1), times = length(countries)),
country = rep(countries, each = length(1920:2024)),
count = NA
)
result
knitr::opts_chunk$set(echo = TRUE)
# For reading in .parquet files
library(arrow)
# Data processing package
library(tidyverse)
library(patchwork)
# Map creation
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
# For Packages for fishbase
remotes::install_github("cboettig/duckdbfs", force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# For reading in .parquet files
library(arrow)
# Data processing package
library(tidyverse)
library(patchwork)
# Map creation
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
# For Packages for fishbase
remotes::install_github("cboettig/duckdbfs", force = TRUE)
remotes::install_github("ropensci/rfishbase")
library(duckdbfs)
library(rfishbase)
# Load in packages needed for ARTIS
library(devtools)
library(tidytext)
devtools::install_github("davidsjoberg/ggsankey")
library(ggsankey)
devtools::install_github("Seafood-Globalization-Lab/exploreARTIS@v1.0.0", dependencies = TRUE)
library(exploreARTIS)
library(rgbif)
# Convert countries to iso3c
library(countrycode)
# for parallel processing
library(parallel)
obis_data <- read_parquet("data/obis_20241202.parquet")
obis_data <- read_parquet("data/obis_20241202.parquet")
intall.packages("robis")
install.packages("robis")
library(robis)
dataset(scientificname = "Decapoda")
?map_ggplot()
occurrences(scientificname = "Decapoda")
occurrence(scientificname = "Decapoda")
occurrence(scientificname = "Decapoda", startdate = 2023)
occurrence(scientificname = "Decapoda", startdate = make_date(2023, 1, 1))
occurrence(scientificname = "Decapoda", startdate = make_date(2023, 1, 1)) %>%
group_by(individualCount) %>%
summarize(sum = sum(individualCount))
occurrence(scientificname = "Decapoda", startdate = make_date(2023, 1, 1))
occurrence(scientificname = "Decapoda", startdate = make_date(2023, 1, 1)) %>%
summarize(sum = sum(individualCount))
occurrence(scientificname = "Decapoda", startdate = make_date(2023, 1, 1)) %>%
str()
occurrence(scientificname = "Decapoda", startdate = make_date(2023, 1, 1)) %>%
mutate(individualCount = as.numeric(individualCount))
occurrence(scientificname = "Decapoda", startdate = make_date(2023, 1, 1)) %>%
mutate(individualCount = as.numeric(individualCount)) %>%
summarize(sum = sum(individualCount))
occurrence(scientificname = "Decapoda", startdate = make_date(2023, 1, 1)) %>%
mutate(individualCount = as.numeric(individualCount)) %>%
filter(!is.na(individualCount)) %>%
summarize(sum = sum(individualCount))
occurrence(scientificname = "Decapoda", startdate = make_date(2023, 1, 1)) %>%
mutate(individualCount = as.numeric(individualCount)) %>%
filter(!is.na(individualCount))
knitr::opts_chunk$set(echo = TRUE)
# For reading in .parquet files
library(arrow)
# Data processing package
library(tidyverse)
library(patchwork)
# Map creation
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
# For Packages for fishbase
remotes::install_github("cboettig/duckdbfs", force = TRUE)
